Metadata-Version: 2.1
Name: not_airflow
Version: 0.0.2
Summary: A small example package implementing Airflow DAG: structured job consist of multiple task and its dependency
Author-email: "Thanh Tu, Do" <tu.dothanh1906@gmail.com>
Project-URL: Homepage, iamtu.dev
Project-URL: Issues, https://github.com/pypa/sampleproject/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: classify-imports==4.2.0
Requires-Dist: contourpy==1.2.0
Requires-Dist: cycler==0.12.1
Requires-Dist: fonttools==4.50.0
Requires-Dist: kiwisolver==1.4.5
Requires-Dist: matplotlib==3.8.3
Requires-Dist: networkx==3.2.1
Requires-Dist: numpy==1.26.4
Requires-Dist: packaging==24.0
Requires-Dist: pillow==10.2.0
Requires-Dist: pyparsing==3.1.2
Requires-Dist: PyQt5==5.15.10
Requires-Dist: PyQt5-Qt5==5.15.2
Requires-Dist: PyQt5-sip==12.13.0
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: reorder-python-imports==3.12.0

# NOTAIRFLOW



## Installtion

```
pip install git+https://github.com/young1906/notairflow#v0.0.2
```

## Examples

```python
from NOTAIRFLOW import Task, Job


def TestJob() -> Job:
    with Job("test-job") as job:
        @Task.wrapper(job)
        def test01():
            print("x")

        @Task.wrapper(job)
        def test02():
            print("y")

        @Task.wrapper(job)
        def test03():
            print("z")

        # invalid job, contain cycle
        test01 >> test02
        test02 >> test03
        test01 << test03

    return job



if __name__ == "__main__":
    j = TestJob()
    j()
```
